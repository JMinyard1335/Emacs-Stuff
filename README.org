#+TITLE: Emacs-Stuff
#+AUTHOR: Jachin Minyard
:PROPERTIES:
#+LATEX_CLASS: article
#+STARTUP: overview
#+OPTIONS: toc:nil
#+OPTIONS: todo:nil
#+OPTIONS: H:6
#+OPTIONS: num:1
#+LATEX_HEADER: \usepackage[margin=.75in]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{tikz}
#+LATEX_HEADER_EXTRA: \usepackage{graphicx}
:END:

* Introduction 
Welcome to my Emacs configuration! This reapo is a collection of different modifications I have made to my Emacs configuration. I have been broken these configurations in to easy to customize modules that can be used independently of each other.
1) [[*Installation][Installation]]
2) [[*Setup][Setup]]
   - [[*Package Setup][Package Setup]]
   - [[*GUI Setup][GUI Setup]]
   - [[*Modeline Setup][Modeline Setup]]
   - [[*Auto Insert Setup][Auto Insert Setup]]
   - [[*Language Setup][Language Setup]]
   - [[*Tools Setup][Tools Setup]]
   - [[*Ligature Setup][Ligature Setup]]
   - [[*Copilot Setup][Copilot Setup]]
   - [[*Org Setup][Org Setup]]
   - [[*Keybinds][Keybinds]]
3) [[*Change Log][Change Log]]

* Installation
To install this reapo run the command below in a directory of your choice I tend to stick it in my home dir 

For HTTPS:
#+begin_src bash
  git clone https://github.com/JMinyard1335/Emacs-Stuff.git
#+end_src
For SSH
#+begin_src bash
  git clone git@github.com:JMinyard1335/Emacs-Stuff.git
#+end_src

Once you have cloned the repository you can copy init file from the directory named after your operating system of choice to your ~/.emacs.d/  or simply follow along with the instructions in the setup section of the readme
* Setup
By the end of the setup your init file should look something along the lines of the following:

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  (add-to-list 'custom-theme-load-path "~/Emacs-Stuff/Themes/")
  (add-to-list 'load-path "~/Emacs-Stuff/Linux/Config/")

  (setq warning-minimum-level :emergency)

  (add-hook 'after-init-hook
            (lambda ()
              (set-face-attribute 'fixed-pitch nil :font "VictorMonoNerdFontMono" :italic nil)))

  ;; Load Packages --------------------------------------------------------------------------------------

  (use-package gui-setup
    :config
    (setq my-battery t
          my-font-name "VictorMonoNerdFontMono"
          my-font-italic t
          my-fullscreen t
          my-theme 'wombat)
    (setup-gui))

  (use-package modeline-setup
    :config
    (setq my-modeline-battery t
          my-modeline-time t
          my-modeline-display-buffer t
          my-modeline-content-info t)
    (my-modeline-setup))

  (use-package autoinsert-setup
    :config
    (my-set-snippet-dirs "/Emacs-Stuff/Snippets")
    (yas-reload-all))

  (use-package language-setup
    :config
    (setq my-eglot-ensure-list
          '(c++-mode-hook
            c++-ts-mode-hook
            c-mode-hook
            c-ts-mode-hook
            java-mode-hook
            java-ts-mode-hook
            python-mode-hook
            python-ts-mode-hook
            janet-mode-hook))
    (my-eglot-ensure))

  (use-package tools-setup
    :config
    (setq my-company-mode-list '(prog-mode-hook)
          my-electric-pair-mode-list '(prog-mode-hook)
          my-rainbow-mode-list '(prog-mode-hook org-mode-hook)
          my-flyspell-mode-list '(text-mode-hook org-mode-hook)
          my-hs-mode-list '(prog-mode-hook janet-mode-hook))
    (my-tool-hook-setup))

  (use-package ligatures-setup)

  (use-package copilot-setup
    :config
    (setq my-copilot-mode-list
          '(prog-mode-hook
            org-mode-hook))
    (my-copilot-hook))

  (use-package org-setup
    :config
    (my-org-faces)
    (setq org-directory "~/Emacs-Stuff/Org/")
    (my-org-agenda-files '("school.org" "journal.org" "todo.org"))
    (setq org-capture-templates (doct (list (my-school-capture))))
    (my-org-agenda)
    (my-org-tags)
    (my-org-logging)
    (my-org-todo))


  ;; Set Up Keybinds -----------------------------------------------------------------------------------------

  (add-hook 'hs-minor-mode-hook
            (lambda ()
              (define-key hs-minor-mode-map (kbd "C-;") 'hs-hide-block)
              (define-key hs-minor-mode-map (kbd "C-'") 'hs-show-block)
              (define-key hs-minor-mode-map (kbd "C-:") 'hs-hide-all)
              (define-key hs-minor-mode-map (kbd "C-\"") 'hs-show-all)))

  (add-hook 'flyspell-mode-hook
            (lambda ()
              (define-key flyspell-mode-map (kbd "C-s c") 'flyspell-correct-word-before-point)
              (define-key flyspell-mode-map (kbd "C-s b") 'flyspell-buffer)
              (define-key flyspell-mode-map (kbd "C-s a") 'ispell-buffer)))

  (add-hook 'company-mode-hook
            (lambda ()
              (define-key company-active-map (kbd "C-n") 'company-select-next)
              (define-key company-active-map (kbd "C-p") 'company-select-previous)
              (define-key company-active-map (kbd "C-g") 'company-abort)))

  (add-hook 'copilot-mode-hook
            (lambda ()
              (define-key copilot-mode-map (kbd "C-<return>") 'copilot-complete)
              (define-key copilot-mode-map (kbd "C-s-<right>") 'copilot-accept-completion-by-word)
              (define-key copilot-mode-map (kbd "C-s-<down>") 'copilot-accept-completion-by-line)
              (define-key copilot-mode-map (kbd "C-c n") 'copilot-next-completion)
              (define-key copilot-mode-map (kbd "C-c p") 'copilot-previous-completion)))

  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map (kbd "C-c i") 'org-insert-todo-heading)))
#+end_src

I know this seems like a lot but lets go through each part and figure out what you need/want to include in the init file.
** Package Setup
This is the first part of the init file and is responsible for setting up the package manager and the package archives. This is a necessary part of the init file and should be included in all configurations.

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
#+end_src

After this is another required part of the configuration, and that is telling the init file where to find all of the Emacs-stuff modules. To do this edit the following lines with the appropriate paths to  the Themes directory and the OS(Windows, Linux) config of choice.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "/Path/To/Themes")
(add-to-list 'load-path "/Path/To/Config")
#+end_src

There are just a few more things before we get into the fun part.  Since Emacs 29 there have been alot of warnings from different packages that have been annoying me so I have set the warning level to emergency. This can be changed to your liking.
  * THIS IS BAD PRACTICE AS IT HIDES ALL WARNINGS

#+begin_src emacs-lisp
  (setq warning-minimum-level :emergency)
#+end_src

** GUI Setup
We have now arrived to one of the most important parts of any good configuration, how it looks! if your config looks bad I will probably assume it is bad. All jokes aside this module allows you to set various aspects of the gui's appearance without having to dig through loads of customization pages. Below is the code for all the options available to set in the gui-setup module.

#+begin_src emacs-lisp
(use-package gui-setup
  :config
  (setq my-battery t
	my-font-name "VictorMonoNerdFontMono"
	my-font-size 12
	my-font-italic t
	my-theme 'wombat
	my-frame-width 80
	my-frame-height 30
	my-fullscreen t
	my-menu-bar nil
	my-tool-bar nil
	my-scroll-bar nil
	my-line-numbers t
	my-tab-line t
	my-startup-buffer nil
	)
  (setup-gui))
#+end_src

Below is additional information of each of the variables above
*** my-font-name
This variable is used to set the font of the gui. Do not set this to "VictorMonoNerdFont" Unless it is installed on your system. Instead Pick one of the system fonts.
*** my-font-size
The Size of the font make sure to represent this as 10 * font size. so if you want 14pt font then set this value to 140.
*** my-font-italic
This was more for me since my font is a cursive font and need to be italic to do that. Set this to t if you want all the font to be italic.
*** my-theme
Used to set the theme of the editor. You can use one of the built in themes or one of the custom ones in the Emacs-Stuff/Themes directory.
*** my-frame-height
Sets the initial height of the window opened.
*** my-frame-width
Sets the initial width of the window opened.
*** my-fullscreen
Sets Emacs to open maximized with borders. If set to true this will override my-frame-height/my-frame-width.
*** my-menu-bar
Turns on and off the menu bar. If you are new to emacs I would recommend leaving this on just so you have a way to find the hotkeys.
*** my-tool-bar
Turns on and off the tool bar. If you are new to emacs I would recommend leaving this on just so you have a way to find the hotkeys
*** my-scroll-bar
Turns on and off the scroll bar.  This is a preference and I prefer to have it off. turn it on to see the scroll bar on the right of the window.
*** my-line-numbers
Turns on and off the line numbers. These line numbers are only applied to programming mode and not to any of the plain text modes so they wont be in the way while formatting a document or something.
*** my-tab-line
Turns on and off the tabline. The tabline is similar to the tabs found in a web browser or vs code.
*** my-startup-buffer
Turns on and off the startup buffer. This is the buffer that opens when you first open emacs, It contains useful info like a tutorial so if you are new check that out. if you turn this off then by default the scratch buffer will open on start up.

** Modeline Setup
The modeline is the bar at the bottom of the window. It contains a plethora of information about the mode/minor-modes time, rows, cols, linenumber, time, battery, gitstatus and much more. The modeline is your best friend for a quick glimpse of the file you are in overall.

#+begin_src emacs-lisp
  (use-package modeline-setup
    :config
    (setq my-modeline-height 40
          my-modeline-bar-width 8
          my-modeline-time t
          my-modeline-battery t
          my-modeline-display-buffer t
          my-modeline-content-info t)
    (my-modeline-setup))
#+end_src

The variables here set multiple values at once as the modeline and doom-mode line which was used for the visual aesthetic have many variables which that need to be set in tandem.
*** my-modeline-height
Determines the height of the modeline...duh, The should scale all items in the bar as well. be ware that a modeline that is to large is more annoying than helpful.
*** my-modeline-bar-width
Determines the width of the bar on the left side of the modeline. This is a weird one and I am not even sure why there is a bar there. It looks kinda cool ig and I believe there is a  way to change the color? tho I haven't implemented it.
*** my-modeline-time
Determines if the time is displayed in the modeline. This is useful for keeping track of time while working. I know for a fact Ill put emacs in full screen and forget to ever check the time so this can minimize my stupidity and how often I miss meetings.
*** my-modeline-battery
Determines if the battery is displayed in the modeline. This is useful for keeping track of battery life on a laptop. It will change color depending on the percent of the battery left and whether or not it is charging. *Turn off if on a desktop* as this will cause an error to be thrown.
*** my-modeline-display-buffer
Determines if the buffer name is displayed in the modeline. This is useful for keeping track of what file you are in. This is a must have for me as I tend to have multiple files open at once and need to know which one I am in.
*** my-modeline-content-info
If t Displays info like the current row and column number, the total number of lines in the buffer, and the percentage of the buffer that is visible. This is useful for keeping track of where you are in the file and how much you have left to go.

** Auto Insert Setup
Auto insert is a package that allows you to insert snippets of code or text into a buffer with a simple keywords. It also allows for the insertion of boiler plate content into new files. This is useful for keeping a consistent format across all of your files (especially org docs).

#+begin_src emacs-lisp
  (use-package autoinsert-setup
    :config
    (my-set-snippet-dirs "/Emacs-Stuff/Snippets")
    (yas-reload-all))
#+end_src

Unlike the other modules this one requires little to no setup. Simply set the path to the directory containing the snippets you want to use and run the command yas-reload-all. This will load all the snippets into the auto insert package and make them available for use.
When setting the path: The function will *concat the path with $HOME*. keep this in mind when setting up the location to store these variables. If you use the path provided above and your Emacs-stuff dir is located in $HOME/Emacs-Stuff then you can leave the path as is and will find some snippets ready to use.
   
** Language Setup
This is where most of the coding features come in. This module takes advantage of the built in tree-sitter and eglot functions of emacs 29. Currently the functionality of the module is limited to simply providing a list of modes you wish to enable eglot in. In the future I would like to extend the functionality to allow for the modification of things like formatting of different languages.

#+begin_src
  (use-package language-setup
  :config
  (setq my-eglot-ensure-list
	'(c++-mode-hook
	  c++-ts-mode-hook
	  c-mode-hook
	  c-ts-mode-hook
	  java-mode-hook
	  java-ts-mode-hook
	  python-mode-hook
	  python-ts-mode-hook))
  (my-eglot-ensure))
#+end_src

As you can see simply add the language you want to the list and eglot will attempt to run the language server for that language. If you do not have the language server installed then you will need to install it before this will work. Also you will need to install the tree-sitter-grammars for the languages you want to use. This can be done by running the command \newline
*M-x: treesit-install-language-grammar*
and then entering the name of the language you want and following the instructions in the mini-buffer

** Tools Setup
The tools module is probably going to be one of the most useful and largest modules in the configuration. This module is responsible for setting up all of the minor modes that are used in the configuration. This includes things like company-mode, electric-pair-mode, rainbow-mode, flyspell-mode, and hs-minor-mode. Any additional general use tools will be set up in this module for the user to take advantage of.

#+begin_src emacs-lisp
  (use-package tools-setup
    :config
    (setq my-company-mode-list '(prog-mode-hook)
          my-electric-pair-mode-list '(prog-mode-hook)
          my-rainbow-mode-list '(prog-mode-hook org-mode-hook)
          my-flyspell-mode-list '(text-mode-hook org-mode-hook)
          my-hs-mode-list '(prog-mode-hook janet-mode-hook))
    (my-tool-hook-setup))  
#+end_src

Setting up this module is similar to that of the languages where you simply provide a a list of the desired mode-hooks you wish to activate the tool in.

** Ligature Setup
Ligatures is in its bare minimum state at the moment that means it is all or nothing. Eventually I want to implement a way to create custom groups of ligatures that can be set to different modes or toggled between. This is due to some programming languages not playing kindly with ligatures. For now this is a simple on or off switch.

#+begin_src emacs-lisp
  (use-package ligatures-setup)
#+end_src

Simply include or comment out this line to enable or disable ligatures in your configuration.

** Copilot Setup
This is a package for Githubs copilot integration with Emacs. This package is much like the previous ones where all you need to do is supply a list of the modes you want to enable copilot in, And assuming that you have copilot and are logged in it will work. To login and install the server use the following commands
- M-x: copilot-install-server
- M-x: copilot-login
and follow any instructions in the mini-buffer. This will most likely take you to the github website so have access to the internet and a web browser. If you do not want copilot then do not add this module to your configuration.

#+begin_src emacs-lisp
  (use-package copilot-setup
    :config
    (setq my-copilot-mode-list
          '(prog-mode-hook
            org-mode-hook))
    (my-copilot-hook))
#+end_src

And thats it enjoy the copilot integration.
** Org Setup
This module is the most complicated in terms of how to handle with customization. As org-mode is definitely better with a personalized setup. Things like capture templates and agenda views are hard to set up to be useful for everyone and are better left to the user to set up. That being said you can use my custom functions to set up your org-mode configuration. or delve into the org-mode-setup.el file and set up your own configuration.

#+begin_src emacs-lisp
  (use-package org-setup
    :config
    (my-org-faces)
    (setq org-directory "~/Emacs-Stuff/Org/")
    (my-org-agenda-files '("school.org" "journal.org" "todo.org"))
    (setq org-capture-templates (doct (list (my-school-capture))))
    (my-org-agenda)
    (my-org-tags)
    (my-org-logging)
    (my-org-todo))
#+end_src

When setting up org mode you need to specify the directory in which the agenda and templates can look for org files. this can be done with the
#+begin_src emacs-lisp
  (setq org-directory "/Path/To/Dir")
#+end_src

You can also specify certain files as the agenda files separately from the org-directory. This can be done with the following function
#+begin_src emacs-lisp
  (my-org-agenda-files '("file1.org" "file2.org"))
#+end_src

and finally the capture templates. This a doct list of capture functions that are in the org-setup.el file. You can add your own capture templates by adding a new function to the org-setup.el file and then adding it to the list of capture templates in the org-setup module. This can be done with the following function
#+begin_src emacs-lisp
  (setq org-capture-templates (doct
                               (list
                                (my-school-capture
                                 additional-capture
                                 ...
                                 ...))))
  #+end_src
** Keybinds
This is something that is completely user dependent so instead of hiding the keybinds i prefer in the modules internal I call simple hooks from the init file like so:

#+begin_src emacs-lisp
  (add-hook 'hs-minor-mode-hook
            (lambda ()
              (define-key hs-minor-mode-map (kbd "C-;") 'hs-hide-block)
              (define-key hs-minor-mode-map (kbd "C-'") 'hs-show-block)
              (define-key hs-minor-mode-map (kbd "C-:") 'hs-hide-all)
              (define-key hs-minor-mode-map (kbd "C-\"") 'hs-show-all)))

  (add-hook 'flyspell-mode-hook
            (lambda ()
              (define-key flyspell-mode-map (kbd "C-s c") 'flyspell-correct-word-before-point)
              (define-key flyspell-mode-map (kbd "C-s b") 'flyspell-buffer)
              (define-key flyspell-mode-map (kbd "C-s a") 'ispell-buffer)))

  (add-hook 'company-mode-hook
            (lambda ()
              (define-key company-active-map (kbd "C-n") 'company-select-next)
              (define-key company-active-map (kbd "C-p") 'company-select-previous)
              (define-key company-active-map (kbd "C-g") 'company-abort)))

  (add-hook 'copilot-mode-hook
            (lambda ()
              (define-key copilot-mode-map (kbd "C-<return>") 'copilot-complete)
              (define-key copilot-mode-map (kbd "C-s-<right>") 'copilot-accept-completion-by-word)
              (define-key copilot-mode-map (kbd "C-s-<down>") 'copilot-accept-completion-by-line)
              (define-key copilot-mode-map (kbd "C-c n") 'copilot-next-completion)
              (define-key copilot-mode-map (kbd "C-c p") 'copilot-previous-completion)))

  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map (kbd "C-c i") 'org-insert-todo-heading)))
#+end_src

These are some of the more common key binds feel free to put these in your config and customize the bindings. Note that the keybinds are set in the hooks for the modes so that they only apply when the mode is active. This is to prevent conflicts with other modes that may use the same keybinds. This is not perfect and you still need to worry about overriding the packages keybinds but it is a good start.

*  Change Log
